# BEAVER
Дизайн-документ по стратегии «Beaver War»
Содержание:
1.	Основные задачи
2.	Основные механики
3.	Игровые объекты
4.	Список желаний




Основные задачи:
1.	Должна присутствовать кампания против ИИ.
2.	Помимо обычной игры может присутствовать таблица для хранения рекордов.
3.  Должно быть рабочее меню
4.	Должна быть заставка игры.




Основные механики:
Игровой процесс
Есть две команды – аналог СССР и Рейха, а также изначально чистая карта сражения. На карте выставляется две главные башни каждой фракции. Главная задача игры – разрушить башню противоположного цвета. Для этого он должен нанимать юнитов трёх видов, а также защитить свою базу с помощью башен.
Метакэш
Валюта, за которую покупаются юниты и башни. Она производится фермами во время каждого хода. Основная башня начисляет каждый ход 10 единиц метакэша, а ферма – 5 единиц. Собственно, каждый раз, когда игрок получает метакэш, игра останавливается и даёт возможность на полученный метакэш расставить новые здания и юнитов. Это своего рода аналог хода.
Сражение
Каждый юнит обладает своей моделью поведения. Если врагов поблизости нет, то они идут по направлению к главной башне по кратчайшему пути. При этом юниты противника можно перенаправить с помощью выставления стен и атакующей башне. У каждого юнита есть «видимость», и она определяет его действия. Например, если перед юнитом стена, но в его зоне видимости есть участок без стены, то он просто обойдёт стену, а если нет, то он будет разрушать стену. Если юнит умер, то клетка под ним становится красной (типа кровь). Здания же просто исчезают.
Рекорды
Рекорды хранятся в базе данных и показываются в меню игры. Очки считаются так: 
•	+1 очко за каждую единицу метакэша.
•	-1 очко за каждого убитого юнита.
•	+10 очков за каждое разрушенное здание соперника.
•	-5 очков за каждое потерянное здание.
•	+50 очков за уничтожение главной башни соперника.
•	-100 очков за проигрыш.



Игровые объекты:
Для каждого типа игрового объекта нужно создать отдельный класс и унаследовать от него каждый подтип этого объекта. Всего типов игровых объектов 3: здания, юниты и прожектайлы. В списке ниже указаны все методы каждого типа и подтипа.

1.	Юниты: 
               - __init__() - описывается всё, что вы посчитаете нужным (цена, скорость, хп…).
               - move() – передвигает юнита с его начальных координат на новые с указанной скоростью.
               - pattern() – принимает параметр видимости и определяет поведение юнита, если в зону видимости попадают другие объекты.
               - second_pattern() – ничего не делает, метод переопределится в подтипах юнитов.
               - attack() – ничего не делает, метод переопределится в подтипах юнитов.


Подтипы юнитов:

              - Trooper(Unit):
                      - second_pattern() – если на пути встаёт враг или непроходимая стена, то                                                                воин подходит к ним вплотную и атакует.
                      - attack() – если боец находится вплотную к вражескому юниту/зданию, то он наносит урон.

              - Sniper(Unit):
                      - second_pattern() – если враг или здание находится в зоне видимости, то снайпер атакует. Если кто-то подходит вплотную к снайперу, то снайпер пытается уйти.
                      - attack() – спаунит прожектайл Bullet, который летит по направлению к врагу и наносит урон.
            
             - GasFighter(Unit):
                      - second_pattern() – если он видит юнита, то атакует. На здания не реагирует.
                      - attack() – спаунит несколько прожектайлов Cloud, которые проходят сквозь врагов и наносят им урон, имеют неограниченную дальность, но не наносят урон зданиям.










2.	Здания:
               - __init__() – описывается хп, цвет (принадлежность), скорострельность (изначально равна нулю, ибо стреляет только атакующая башня.) и стоимость.
               - pattern() – ничего не делает, метод переопределится в подтипах юнитов.



Подтипы зданий:

          - Wall(Building):
              - pattern() – если рядом стоят ещё стены, то увеличивает здоровье (типа становится крепче)
          - Attack_Tower(Building):
             - pattern() – если вражеские юниты или здания находятся в определённом радиусе от башни, то башня спаунит прожектайл Bullet, который летит в сторону соперника и атакует его (скоростельность ниже, чем у лучника).

            - Farm(Building):
             - pattern() – привлекает вражеских бойцов, если находится в зоне их видимости, и генерирует 5 ед. метакэша с определённым промежутком времени (это связано с механикой хода в игре).
           
           - Main_Tower(Building):
             - pattern() – Такая же, что и у стены, но если хп доходит до нуля, игра завершается, указывается количество полученных очков, выигравшая сторона и какая-нибудь надпись.




3.	Прожектайлы:
-	__init__() – указывается скорость снаряда, его частоту появления и его внешний вид, разумеется.
-	move() – указываются начальные координаты и конечные.
-	pattern() -- ничего не делает, метод переопределится в подтипах юнитов.


Виды прожектайлов:
            - Bullet(Projectile):
             - pattern() – наносит урон и исчезает при попадании.
           
           - Cloud(Projectile):
             - pattern() – проходит через юнитов, наносит им один раз урон, исчезает только при контакте со зданиями (им урона не наносит) или при достижении края карты.
Список желаний
Все второстепенные штуки, которые бы улучшили качество проекта.
•	Если юнитам наносится урон, то они на тик загораются красным.
•	На заставке можно разместить рандомные подсказки.
•	Создать поле с информацией и именами разработчиков (Сделано!)
•	Добавить в игру саундтрек. (Сделано!)
•	Реализовать систему достижений.
•	Придумать новых юнитов и их механики.
•	Создать полноценный мультиплеер.




Спасибо за внимание!

